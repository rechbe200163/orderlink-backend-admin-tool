
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  customerId: 'customerId',
  customerReference: 'customerReference',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  companyNumber: 'companyNumber',
  modifiedAt: 'modifiedAt',
  deleted: 'deleted',
  signedUp: 'signedUp',
  avatarPath: 'avatarPath',
  addressId: 'addressId',
  businessSector: 'businessSector'
};

exports.Prisma.CustomerHistoryScalarFieldEnum = {
  historyId: 'historyId',
  customerReference: 'customerReference',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  companyNumber: 'companyNumber',
  modifiedAt: 'modifiedAt',
  deleted: 'deleted',
  signedUp: 'signedUp',
  avatarPath: 'avatarPath',
  addressId: 'addressId',
  businessSector: 'businessSector'
};

exports.Prisma.CartScalarFieldEnum = {
  cartId: 'cartId',
  customerReference: 'customerReference'
};

exports.Prisma.AddressScalarFieldEnum = {
  addressId: 'addressId',
  city: 'city',
  country: 'country',
  postCode: 'postCode',
  state: 'state',
  streetName: 'streetName',
  streetNumber: 'streetNumber',
  modifiedAt: 'modifiedAt',
  deleted: 'deleted'
};

exports.Prisma.ProductScalarFieldEnum = {
  productId: 'productId',
  name: 'name',
  price: 'price',
  description: 'description',
  stock: 'stock',
  imagePath: 'imagePath',
  createdAt: 'createdAt',
  modifiedAt: 'modifiedAt',
  deleted: 'deleted',
  categoryId: 'categoryId'
};

exports.Prisma.ProductHistoryScalarFieldEnum = {
  historyId: 'historyId',
  productId: 'productId',
  name: 'name',
  price: 'price',
  description: 'description',
  stock: 'stock',
  imagePath: 'imagePath',
  createdAt: 'createdAt',
  modifiedAt: 'modifiedAt',
  deleted: 'deleted',
  categoryId: 'categoryId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  categoryId: 'categoryId',
  name: 'name',
  imagePath: 'imagePath',
  deleted: 'deleted'
};

exports.Prisma.OrderScalarFieldEnum = {
  orderId: 'orderId',
  customerReference: 'customerReference',
  orderDate: 'orderDate',
  deliveryDate: 'deliveryDate',
  deleted: 'deleted',
  orderState: 'orderState',
  selfCollect: 'selfCollect'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  invoiceId: 'invoiceId',
  orderId: 'orderId',
  invoiceAmount: 'invoiceAmount',
  paymentDate: 'paymentDate',
  pdfUrl: 'pdfUrl',
  deleted: 'deleted'
};

exports.Prisma.RouteScalarFieldEnum = {
  routeId: 'routeId',
  name: 'name',
  deleted: 'deleted'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  employeeId: 'employeeId',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  deleted: 'deleted',
  role: 'role'
};

exports.Prisma.SiteConfigScalarFieldEnum = {
  siteConfigId: 'siteConfigId',
  companyName: 'companyName',
  logoPath: 'logoPath',
  email: 'email',
  phoneNumber: 'phoneNumber',
  iban: 'iban',
  companyNumber: 'companyNumber',
  addressId: 'addressId',
  modifiedAt: 'modifiedAt',
  isPremium: 'isPremium',
  deleted: 'deleted',
  stripeCustomerId: 'stripeCustomerId',
  stripeAccountId: 'stripeAccountId',
  stripeConfigured: 'stripeConfigured'
};

exports.Prisma.ActionScalarFieldEnum = {
  name: 'name',
  description: 'description',
  deleted: 'deleted'
};

exports.Prisma.RessourceScalarFieldEnum = {
  name: 'name',
  description: 'description',
  deleted: 'deleted'
};

exports.Prisma.ResourceActionScalarFieldEnum = {
  action: 'action',
  resource: 'resource'
};

exports.Prisma.RoleScalarFieldEnum = {
  name: 'name',
  description: 'description',
  deleted: 'deleted'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  role: 'role',
  action: 'action',
  resource: 'resource',
  allowed: 'allowed',
  createdAt: 'createdAt'
};

exports.Prisma.CartOnProductsScalarFieldEnum = {
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity'
};

exports.Prisma.OrderOnProductsScalarFieldEnum = {
  orderId: 'orderId',
  productId: 'productId',
  orderDate: 'orderDate',
  productAmount: 'productAmount'
};

exports.Prisma.RoutesOnOrdersScalarFieldEnum = {
  routeId: 'routeId',
  orderId: 'orderId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BusinessSector = exports.$Enums.BusinessSector = {
  AGRICULTURE: 'AGRICULTURE',
  CONSTRUCTION: 'CONSTRUCTION',
  EDUCATION: 'EDUCATION',
  FINANCE: 'FINANCE',
  HEALTH: 'HEALTH',
  HOSPITALITY: 'HOSPITALITY',
  IT: 'IT',
  MANUFACTURING: 'MANUFACTURING',
  OTHER: 'OTHER',
  RETAIL: 'RETAIL',
  TECHNOLOGY: 'TECHNOLOGY',
  TOURISM: 'TOURISM',
  TRANSPORTATION: 'TRANSPORTATION'
};

exports.OrderState = exports.$Enums.OrderState = {
  ORDER_PLACED: 'ORDER_PLACED',
  IN_PROGRESS: 'IN_PROGRESS',
  DISPATCHED: 'DISPATCHED',
  DELIVERED: 'DELIVERED',
  ORDER_COLLECTED: 'ORDER_COLLECTED'
};

exports.Actions = exports.$Enums.Actions = {
  READ: 'READ',
  DELETE: 'DELETE',
  UPDATE: 'UPDATE',
  CREATE: 'CREATE'
};

exports.Ressources = exports.$Enums.Ressources = {
  PRODUCT: 'PRODUCT',
  ORDER: 'ORDER',
  CUSTOMER: 'CUSTOMER',
  CART: 'CART',
  ADDRESS: 'ADDRESS',
  INVOICE: 'INVOICE',
  EMPLOYEE: 'EMPLOYEE',
  ROLE: 'ROLE',
  ROUTES: 'ROUTES',
  SITE_CONFIG: 'SITE_CONFIG',
  CATEGORY: 'CATEGORY',
  ACTION: 'ACTION',
  PERMISSION: 'PERMISSION',
  STATISTICS: 'STATISTICS'
};

exports.Prisma.ModelName = {
  Customer: 'Customer',
  CustomerHistory: 'CustomerHistory',
  Cart: 'Cart',
  Address: 'Address',
  Product: 'Product',
  ProductHistory: 'ProductHistory',
  Category: 'Category',
  Order: 'Order',
  Invoice: 'Invoice',
  Route: 'Route',
  Employees: 'Employees',
  SiteConfig: 'SiteConfig',
  Action: 'Action',
  Ressource: 'Ressource',
  ResourceAction: 'ResourceAction',
  Role: 'Role',
  Permission: 'Permission',
  CartOnProducts: 'CartOnProducts',
  OrderOnProducts: 'OrderOnProducts',
  RoutesOnOrders: 'RoutesOnOrders'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
